import os

SCRIPT_TO_SKIP = 'update-readme.py'  # Name of the generator script

def extract_description(filepath):
    """Extracts the top comment block as the script description, preserving line breaks."""
    description_lines = []
    with open(filepath, 'r', encoding='utf-8') as f:
        for line in f:
            stripped = line.strip()
            if stripped.startswith('#'):
                description_lines.append(stripped[1:].strip())
            elif description_lines:
                break
    # Join lines with Markdown line breaks (two spaces + newline)
    return '  \n'.join(description_lines) if description_lines else 'No description available.'

def main(scripts_dir='.'):
    script_files = [
        f for f in os.listdir(scripts_dir)
        if f.endswith('.py')
        and os.path.isfile(os.path.join(scripts_dir, f))
        and f != SCRIPT_TO_SKIP
    ]
    script_files.sort()
    entries = []
    for script in script_files:
        desc = extract_description(os.path.join(scripts_dir, script))
        entries.append(f"- [{script}](./{script}):\n\n{desc}\n")

    with open(os.path.join(scripts_dir, 'README.md'), 'w', encoding='utf-8') as readme:
        readme.write("# Python Scripts üêç\n\n")
        readme.write("This directory contains the following scripts:\n\n")
        readme.write('\n'.join(entries))
        readme.write('\n')
        readme.write("\n\nGenerated by [`update-readme.py`](./update-readme.py).\n\n")
        readme.write("\n")
        readme.write("# License\n\n")
        readme.write("MIT")

if __name__ == '__main__':
    main()
